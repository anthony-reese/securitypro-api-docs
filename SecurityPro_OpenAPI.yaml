
openapi: 3.0.3
info:
  title: SecurityPro API
  version: "2.0.0"
  description: >
    Secure RESTful API for identity and access management. This specification includes authentication, user management, and role-based access control.
  contact:
    name: SecurityPro Support
    email: support@securitypro.com

servers:
  - url: https://api.securitypro.com/v1

paths:
  /oauth2/authorize:
    get:
      summary: Redirect user to authorize access
      parameters:
        - in: query
          name: client_id
          required: true
          schema: { type: string }
        - in: query
          name: redirect_uri
          required: true
          schema: { type: string }
        - in: query
          name: response_type
          required: true
          schema: { type: string, enum: [code] }
        - in: query
          name: scope
          required: true
          schema: { type: string }
        - in: query
          name: state
          required: false
          schema: { type: string }
      responses:
        '302':
          description: Redirect to login page

  /oauth2/token:
    post:
      summary: Exchange auth code or refresh token for access token
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                code:
                  type: string
                refresh_token:
                  type: string
                redirect_uri:
                  type: string
                client_id:
                  type: string
                client_secret:
                  type: string
              required: [grant_type, client_id, client_secret]
      responses:
        '200':
          description: Access token issued
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  token_type:
                    type: string
                  expires_in:
                    type: integer
                  refresh_token:
                    type: string

  /me:
    get:
      summary: Get current authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User info
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: { type: string }
                  email: { type: string }
                  name: { type: string }
                  roles:
                    type: array
                    items: { type: string }

  /users:
    post:
      summary: Create a new user
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                name: { type: string }
                role: { type: string }
              required: [email, name, role]
      responses:
        '201':
          description: User created

  /users/{user_id}:
    get:
      summary: Get user by ID
      parameters:
        - in: path
          name: user_id
          required: true
          schema: { type: string }
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User found

    patch:
      summary: Update user
      parameters:
        - in: path
          name: user_id
          required: true
          schema: { type: string }
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                role: { type: string }
      responses:
        '200':
          description: User updated

    delete:
      summary: Delete user
      parameters:
        - in: path
          name: user_id
          required: true
          schema: { type: string }
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User deleted

  /roles:
    get:
      summary: Get all roles
      responses:
        '200':
          description: List of roles

  /users/{user_id}/roles:
    post:
      summary: Assign role to user
      parameters:
        - in: path
          name: user_id
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                role: { type: string }
      responses:
        '200':
          description: Role assigned

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
